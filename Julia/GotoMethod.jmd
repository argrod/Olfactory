```julia
using SpecialFunctions
using Optim
using Glob
using CSV
using DataFrames
using Dates
using Statistics
```

# Wind estimation through track asymmetry

Method derived from [Goto et al., 2016]()

```julia
function Likelihoodww(data1,data2,cv)
    return function(par)
        a = par[1]
        b = cv/gamma(1+1/a)
        mx = par[2]
        my = par[3]
        wx = par[4]
        xy = par[5]
        L = 0
        for i = 1:length(data1)
            rr = sqrt((data1[i]*cos(data2[i]) - wx)^2 + (data1[i] + sin(data2[i]) - wy)^2)
            rx = (data1[i]*cos(data2[i]) - wx)/rr
            ry = (data1[i]*sin(data2[i]) - wy)/rr
            lp = (a - 2)*log(rr) - (rr/b)^a + mx + rx + my + ry + log(a) - log(b) + (1 - a)*log(b) - log(besseli(sqrt(mx^2 + my^2),0))
            L = L + lp
        end
    end
end

function weibullSD(a,b)
    b * sqrt(gamma(1+2/a) - gamma(1+1/a) * gamma(1+1/a))
end
function weibull_mean(a,b)
    b+gamma(1+1/a)
end
function vM_sd(kappa)
    1/sqrt(kappa)
end
#function sumSamp(DT,gap)

#end
```

```julia
select <- NA
    for(b in 1:length(tsel)){
        choose <- which(AxDat[, 1] >= (tsel[b] - (median(dtFull)/2)) & AxDat[, 1] <= (tsel[b] + (median(dtFull)/2)))
        if(length(choose) != 0){
            if(length(choose) > 1){
                select[b] <- choose[which.min(abs(tsel[b] - AxDat[choose, 1]))]
            } else {
                select[b] <- choose
            }
        }
    }

if Sys.iswindows()
    infile = "E:/My Drive/PhD/Data/2018Shearwater/AxyTrek/"
    outfile = "E:/My Drive/PhD/Data/2018Shearwater/WindEst/MinuteGotoVersion/"
else
    outfile = "/Volumes/GoogleDrive/My Drive/PhD/Data/2018Shearwater/WindEst/MinuteGotoVersion/"
    infile = "/Volumes/GoogleDrive/My Drive/PhD/Data/2018Shearwater/AxyTrek/"
end
files = glob("*/*.txt",infile)
```

```julia
sampling_interval = 60;     #  sampling interval [sec]
time_window = 51;     #  time length of time window [min] *Give an odd number!
cutlength = 45;     # minimum number of data points (track vectors) included in a time window [points]         
cutv = 4.1667; # minimum ground speed [m/sec]

###         Condition 3: give mean air speed value      #####
constv = 34.7/3.6; # mean air speed [m/sec]
#We gave the mean ground speed of streaked shearwater (Shiomi #et. al. 2012) as the mean air speed
error_of_sampling_interval = 5;
cutt = sampling_interval+error_of_sampling_interval; 
# upper value of sampling interval [sec]
windwidth = time_window-1;                           
# length of time window(velocity)  [min]

b = 1
EDat = CSV.File(files[b],header=false,delim="\t") |> DataFrame
rename!(EDat,[:DT,:lat,:lon,:altitude,:grSpd,:satCount,:hdop,:maxSigStr])
df = DateFormat("d/m/y,H:M:S")
EDat.DT = DateTime.(EDat.DT,df)
tsel = (EDat.DT[1]:Dates.Minute(1):EDat.DT[end])
select = Int[];
dtFull = median(Dates.value.(Dates.Second.(diff(EDat.DT))))
for b = 1:length(tsel)
    choose = which(EDat.DT .>= (tsel[b] - Dates.Second(dtFull)) & EDat.DT .<= (tsel[b] + (median(dtFull)/2)))
    

```